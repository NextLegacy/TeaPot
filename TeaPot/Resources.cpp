// Auto generated file.
#include "Resources.hpp"
namespace TP{
    const std::unordered_map<std::string, const std::string> Resources = {
        {"CMakeLists.txt",
R"(# -------------------------------------------------------------------------------------------------
# This CmakeLists.txt file got generated by the TeaPot Engine.
# 
# TeaPot does not only generate the necessary build files for your project, it also
# builds the final executable for you. Therefor, its not recommended to build the project manually
# using cmake or something similar.
#
# In the process of building the executable, TeaPot will first build a shared library that
# contains all the source files of your project. 
#
# From there on, TeaPot will load the shared library and retrieve all the necessary information
# trough the reflection system that is implemented in the BoilingHotWater library.
#
# That way, can generate the necessary source code (later found in /genereated) that
# contains all the boilerplate code that is needed to run your project.
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Variables
# -------------------------------------------------------------------------------------------------

set(OUTPUT_DIR   ${{CMAKE_CURRENT_SOURCE_DIR}}/../../{})
set(ENGINE_DIR   {})
set(SOURCES_DIR  ${{CMAKE_CURRENT_SOURCE_DIR}}/../../{})
set(RESOURCE_DIR ${{CMAKE_CURRENT_SOURCE_DIR}}/../../{})

# -------------------------------------------------------------------------------------------------
# Some general settings
# -------------------------------------------------------------------------------------------------

cmake_minimum_required(VERSION 3.28.1)

project({} VERSION 0.0.1 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD          23 )
set(CMAKE_CXX_STANDARD_REQUIRED ON )
set(CMAKE_CXX_EXTENSIONS        OFF)

# -------------------------------------------------------------------------------------------------
# Include all the necessary packages
# -------------------------------------------------------------------------------------------------

list(APPEND CMAKE_PREFIX_PATH ${{ENGINE_DIR}}/install)

find_package(BoilingHotWater REQUIRED)
find_package(Threads         REQUIRED)
find_package(OpenGL          REQUIRED)
#find_package(glfw3          REQUIRED)
find_package(TeaCup          REQUIRED)
find_package(Tea             REQUIRED)

# -------------------------------------------------------------------------------------------------
# Build the shared library that contains all the source files of your project
# -------------------------------------------------------------------------------------------------

set(BUILD_SHARED_LIBS ON)

file(GLOB_RECURSE NATIVE_SOURCE_FILES ${{SOURCES_DIR}}/*.cpp)
file(GLOB_RECURSE NATIVE_HEADER_FILES ${{SOURCES_DIR}}/*.hpp)

file(WRITE "Headers.hpp" "#pragma once\n\n")

foreach(HEADER_FILE ${{NATIVE_HEADER_FILES}})
    file(APPEND "Headers.hpp" "#include \"${{HEADER_FILE}}\"\n")
endforeach()

message(STATUS "Found source files: ${{NATIVE_SOURCE_FILES}}")

add_library(NativeScripts SHARED ${{NATIVE_SOURCE_FILES}} ${{NATIVE_HEADER_FILES}} NativeScripts.cpp Headers.hpp Resources.cpp Resources.hpp)

target_link_libraries(NativeScripts PUBLIC BoilingHotWater::BoilingHotWater Tea::Tea)

target_include_directories(NativeScripts PUBLIC ${{SOURCES_DIR}})

set_target_properties(NativeScripts PROPERTIES 
    RUNTIME_OUTPUT_DIRECTORY ${{OUTPUT_DIR}}
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ${{OUTPUT_DIR}}
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${{OUTPUT_DIR}}
)

# -------------------------------------------------------------------------------------------------
# Install the shared library to the bin folder
# -------------------------------------------------------------------------------------------------

set(CMAKE_INSTALL_PREFIX ${{CMAKE_CURRENT_SOURCE_DIR}}/bin)

set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

#install(TARGETS NativeScripts RUNTIME DESTINATION .)

# -------------------------------------------------------------------------------------------------
# Build the executable
# -------------------------------------------------------------------------------------------------

set(BUILD_SHARED_LIBS OFF)

add_executable(${{PROJECT_NAME}} ${{CMAKE_CURRENT_SOURCE_DIR}}/EntryPoint.cpp ${{CMAKE_CURRENT_SOURCE_DIR}}/Tea.hpp ${{CMAKE_CURRENT_SOURCE_DIR}}/Tea.cpp)

target_link_libraries(${{PROJECT_NAME}} PUBLIC NativeScripts)

set_target_properties(${{PROJECT_NAME}} PROPERTIES 
    RUNTIME_OUTPUT_DIRECTORY ${{OUTPUT_DIR}}
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ${{OUTPUT_DIR}}
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${{OUTPUT_DIR}}
)

#install(TARGETS ${{PROJECT_NAME}} RUNTIME DESTINATION .)

# -------------------------------------------------------------------------------------------------
# Copy the necessary files to the bin folder
# -------------------------------------------------------------------------------------------------

add_custom_command(
        TARGET ${{PROJECT_NAME}} POST_BUILD
        COMMAND ${{CMAKE_COMMAND}} -E copy_directory
        %{{RESOURCE_DIR}} ${{CMAKE_INSTALL_PREFIX}}/Resources
        COMMENT "Copying ProjectTemplateFiles to ${{OUTPUT_DIR}}/ProjectTemplateFiles"
)

# -------------------------------------------------------------------------------------------------
# RESOURCES
# -------------------------------------------------------------------------------------------------

function(add_resource file_name variable_name)

    file(READ ${{file_name}} file_content)

    file(APPEND ${{CMAKE_CURRENT_SOURCE_DIR}}/Resources.cpp "        {{\"${{variable_name}}\",\nR\"(${{file_content}})\"\n        }},\n")

endfunction()

file(GLOB_RECURSE RESOURCES ${{RESOURCE_DIR}}/*)

file(WRITE ${{CMAKE_CURRENT_SOURCE_DIR}}/Resources.cpp "// Auto generated file.\n#include \"Resources.hpp\"\nnamespace Tea{{\n    const std::unordered_map<std::string, const std::string> Resources = {{\n")

foreach(RESOURCE ${{RESOURCES}})
    get_filename_component(RESOURCE_NAME ${{RESOURCE}} NAME)
    add_resource(${{RESOURCE}} ${{RESOURCE_NAME}})
endforeach()

file(APPEND ${{CMAKE_CURRENT_SOURCE_DIR}}/Resources.cpp "    }};\n}}")

# -------------------------------------------------------------------------------------------------)"
        },
        {"EntryPoint.cpp",
R"(#include <BHW/EntryPoint.hpp>

#include "Tea.hpp"

int BHW::EntryPoint(std::vector<std::string> args)
{{
    Tea::Application app;
    app.Run();

    return 0;
}})"
        },
        {"NativeScripts.cpp",
R"(#include <BHW/DLLEntryPoint.hpp>
#include <BHW/utils/Debug.hpp>

#include "Headers.hpp"

int test(std::string arg)
{{
    return 0;
}}

int BHW::ProcessAttach() {{ return test("ProcessAttach"); }}
int BHW::ProcessDetach() {{ return test("ProcessDetach"); }}
int BHW::ThreadAttach () {{ return test("ThreadAttach" ); }}
int BHW::ThreadDetach () {{ return test("ThreadDetach" ); }}

#include <Tea/EventSubscriber.hpp>
#include <BHW/utils/reflection/Reflection.hpp>

extern "C" __declspec(dllexport) void GetComponents(const BHW::TypeInfo** types, uint32_t* count)
{{
    const BHW::TypeInfo& typeInfo = BHW::GetTypeInfo<Tea::Component>();

    *count = typeInfo.DerivedClasses.size();

    for (auto&[hash, typeInfo] : typeInfo.DerivedClasses) *types++ = &typeInfo;
}}

extern "C" __declspec(dllexport) void GetSystems(const BHW::TypeInfo** types, uint32_t* count)
{{
    const BHW::TypeInfo& typeInfo = BHW::GetTypeInfo<Tea::System>();

    *count = typeInfo.DerivedClasses.size();

    for (auto&[hash, typeInfo] : typeInfo.DerivedClasses) *types++ = &typeInfo;
}}
)"
        },
        {"Resources.hpp",
R"(#pragma once

#include <unordered_map>
#include <string>

namespace Tea
{{
    extern const std::unordered_map<std::string, const std::string> Resources;
}})"
        },
        {"Tea.cpp",
R"(#include "Tea.hpp")"
        },
        {"Tea.hpp",
R"(#pragma once

#include <Tea/Tea.hpp>

#include <BHW/utils/reflection/Reflection.hpp>

#include <{}> // Graphics API include
#include "Headers.hpp"

namespace Tea
{{
    class Application : public Tea
    <        
{}, // Graphics API
        System, 
        ECSSystem
        <
            System,

            // ECS Systems
{}
        >,
        Application,

        // ECS Components
{}
    >
    {{
    }};
}}

BHW_REFLECT(Tea::Application::TECS)
BHW_REFLECT_MEMBERS(Tea::Application::TECS
    BHW_REFLECT_MEMBER(Tea::Application::TECS, &Tea::Application::TECS::m_components           )
    BHW_REFLECT_MEMBER(Tea::Application::TECS, &Tea::Application::TECS::m_entityComponents     )
    BHW_REFLECT_MEMBER(Tea::Application::TECS, &Tea::Application::TECS::m_componentEntityOwners)
)

namespace BHW
{{
    template <>
    std::string ToString<decltype(Tea::Application::TECS::m_components)>(decltype(Tea::Application::TECS::m_components)& object, uint64_t indent)
    {{
        std::string result = "[\n";

        std::string indentString = "";

        for (uint64_t i = 0; i < indent; i++) indentString += "    ";

        std::apply([&](auto&&... args) {{ ((result += "    " + indentString + ToString(args, indent + 1) + ",\n"), ...); }}, object);

        return result + indentString + "]";
    }}
}})"
        },
    };
}